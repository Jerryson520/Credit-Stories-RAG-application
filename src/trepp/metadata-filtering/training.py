"""
Usage: training.py [--question QUESTION]

This script uses the TreppWire RAG (Retrieval Augmented Generation) system to answer questions based on data loaded from S3 and processed using LangChain and ChromaDB.

It requires the following environment variables to be set:
- OPENAI_API_KEY: The API key for accessing OpenAI's services.

The script expects the following configuration parameters to be defined in the config.py file:
- SECRET_NAME: The name of the secret containing the OpenAI API key.
- BUCKET_NAME: The name of the S3 bucket where the data is stored.
- PREFIX: The prefix within the S3 bucket where the data is located.
- MODEL: The name of the OpenAI model to be used for generating responses.
- DBNAME: The name of the ChromaDB database to be used.
- EMBED_MODEL_NAME: The name of the OpenAI embedding model to be used.
- K: The number of relevant contents to retrieve for generating the response.

Options:
  -h, --help            show this help message and exit
  --question QUESTION   The question you want to ask

Examples:
  training.py --question "What are the 5 transactions in New York in Dec, 2023?"
  training.py --question "How many properties in New York City are currently facing foreclosure?"
  training.py --question "What significant events have occurred for Chicago Hotel?"

The script will output the generated answer to the console.
"""

import os, json
from langchain_openai import OpenAIEmbeddings
import chromadb
import chromadb.utils.embedding_functions as embedding_functions
from chromadb.config import Settings
from utils import date_to_int, convert_values, process_llm_output
from utils import SecretManager, OpenAIClient, S3ParquetLoader
from utils_rag import TpwireDataLoader, IndexDoc, tpwireDB, tpwireRAG, df_db_pre
from config import SECRET_NAME, BUCKET_NAME, PREFIX, MODEL, DBNAME, EMBED_MODEL_NAME, K
import argparse


def main(input_question):
    """
    Main function to process a user question and return an answer from the trained model.

    Args:
        input_question (str): The question to be answered by the model.

    Returns:
        str: The answer generated by the model in response to the input question.
    """
    
    secret_manager = SecretManager(secret_name=SECRET_NAME)
    os.environ['OPENAI_API_KEY'] = secret_manager.get_secret('OPENAI_API_KEY')

    embed = OpenAIEmbeddings(model=EMBED_MODEL_NAME) # Create embeddings for indexing documents
    openai_ef = embedding_functions.OpenAIEmbeddingFunction(
        api_key=os.environ['OPENAI_API_KEY'], 
        model_name=EMBED_MODEL_NAME)
    
    
    # class initialization
    openai_client = OpenAIClient(model=MODEL)
    db_client = chromadb.PersistentClient(path='./treppwire-chromaDB')

    # S3 parquet loader
    s3_parquet_loader = S3ParquetLoader(bucket_name=BUCKET_NAME, prefix=PREFIX)

    # Import TreppWire data
    tpwire_loader = TpwireDataLoader(bucket_name=BUCKET_NAME, prefix=PREFIX)
    
    
    # Index_Doc = IndexDoc(embed)
    tpwire_df = tpwire_loader.process_data("tpwire_flags.parquet")
    tpwire_df.head()
    
    index_tb = s3_parquet_loader.load_s3_parquet('treppwire_index_tb.parquet')
    original_df = df_db_pre(index_tb, tpwire_df)
    
    # VectorDB
    # tpwire_DB.delete()
    # tpwire_DB.collection_exists()
    tpwire_DB = tpwireDB(db_client, DBNAME, openai_ef)
    # tpwire_DB.add(original_df=original_df)
    
    
    # Initialize treppwire RAG
    tpwire_RAG = tpwireRAG(tpwire_DB, original_df, openai_client, embed)
    # input_question = 'What are the 5 transactions in New York in Dec, 2023?'
    # input_question = 'How many properties in New York City are currently facing foreclosure?'
    # input_question = 'What significant events have occurred for Chicago Hotel?'
    search_text = input_question # 'What are the 5 transactions in New York in Dec, 2023?'
    # search_text = 'How many properties in New York City are currently facing foreclosure?'

    relevant_contents, prompt = tpwire_RAG.generate_context_prompt(search_text=search_text, K=K)
    response = openai_client.get_completion(message=prompt)
    return json.loads(response.choices[0].message.content)['Answer']


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Ask a question to the TreppWire RAG system')
    parser.add_argument('--question', metavar='question', required=True,
                        help='The question you want to ask')
    args = parser.parse_args()
    print(f"The answer is: {main(args.question)}")